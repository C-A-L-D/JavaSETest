hibernate框架：
	特点：
		持久化，ORM
	搭建：
		三个准备，七个步骤
	代码编写注意点：
		HQL(hibernate query language)和QBC(query by Criteria)查询
		占位符和命名参数
		分页
		Criteria的匹配类用Restrictions.like.....
-------------------------------------------------------------------------------------------------
spring容器管理对象：
	特点：
		轻量级
		DI，IOC容器
		（动态注入利于部署工程后，修改参数不用关闭服务器去修改，直接生效！）
	原理：
		IOC容器通过bean标签定义好各“组件”，通过property注入值，根据程序执行动态注册成bean对象（反射，依赖，注入）
	目的：
		组件化思想并达到解耦合的效果（不用去new对象，直接通过IOC容器注册bean对象；
									组件之间不再通过代码关联；
									不再是对象主动，而是对象被动被IOC容器控制）
	部分代码：
		注意：
			任何依赖的对象都要setter,getter
		配置文件注入值类型：
			对象：（ref）
				<beasn class="" id="">
					<property name="依赖组件（可以是接口或类）" ref="注入组件实现类"></property>
				</beasn>
			字符串：（value）
				<beasn class="" id="">
					<property name="依赖组件（可以是接口或类）">
						<value>注入值</value>
					</property>
				</beasn>
			List集合：（list value）
				<beasn class="" id="">
					<property name="依赖组件（可以是接口或类）">
						<list>
							<value>注入值</value>
							<value>注入值</value>
							<value>注入值</value>
						</list>
					</property>
				</beasn>
			Set集合：（set value）
			Map集合：（map <entry key="" value=""></entry>)
			属性值：（props <prop key="">注入属性值</prop>
		bean的范围属性scope：
			Single（默认）：单一的实例
			Prototype：多例，每注册一次bean都创建一个新的实例
			Request：请求阶段
			Session：会话阶段
		核心代码：
			//读取配置文件applicationContext.xml
			ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");
			//从容器取出bean对象
			HelloBean h = (HelloBean) app.getBean("helloBean");
			System.out.println(h.getHelloWorld());
	spring的bean的生命周期：
		bean的建立（读取beanFactory配置文件，生成所有的实例）---->属性注入（按配置的属性值注入）--->业务代码获取某个bean对象，操作---->用完执行销毁初始化方法
	spring核心模块扩展的其他模块：（加核心模块共七个模块）（参考：https://www.cnblogs.com/zhoudi/p/5820513.html）
		AOP实现（声明式事务）
		DAO->ORM支持
		Context上下文支持->web集成
		MVC
-------------------------------------------------------------------------------------------------
spring AOP：
	AOP(Aspect-Oriented Programming): 面向方面编程  
	目的：
		专心做事，将散布在系统的公共功能集中解决！
		同时弥补OOP（面向对象编程）的不足
	用途：
		日志
		安全(比如（个人想法）登录，在请求控制器的方法时，使用前置通知判定是否登录，
			若登录，正常访问该方法，
			若未登录，则前置通知需要阻止该方法执行（抛异常），将该自定义的异常处理页面设为登录页面)
		性能统计
		事务处理（配置事务管理器，后面会有的）
		异常处理.....
	不使用代理方式的原因：
		使用代理的方式实现AOP不灵活，配置也麻烦！
	AOP术语
		切面aspect，通知advice，连接点joinpoint，切入点pointcut（切入点表达式execution需注意）
	通知类型：
		before	前置通知
		after-returning	后置返回通知
		after-thtowing	异常返回通知
		after	最终通知
		around	环绕通知
	连接点joinpoint接口方法：
		getArgs(获取方法里全部参数)
		getSignature（获取正在被通知的方法全部信息）
	配置AOP方式：
		xml文件配置方式：
			<aop:config>
				<aop:aspect ref="logAspect">
					<aop:pointcut expression="execution(* com.sc..*.*(..))" id="pc"/>
					<aop:before method="before" pointcut-ref="pc"/>
					<aop:after method="after" pointcut-ref="pc"/>
				</aop:aspect>
			</aop:config>
		注解方式：
			配置文件配置：
				<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
			@Aspect	//切面
			@Pointcut("execution(* com.sc..*.*(..))")	//切入点
			public void pc(){}
			@Before("pc()")	//通知
-------------------------------------------------------------------------------------------------
spring+hibernate：
	配置：
		1.配置数据源BasicDataSource
		2.配置会话工厂LocalSessionFactoryBean
			注入数据源
			配置自身属性hibernateProperties
			配置映射文件
		3.配置hibernate模板HibernateTemplate
			注入会话工厂
		4.配置dao
			注入hibernate模板
		5.配置事务(xml和注解配置，推荐xml配置)-------------由于spring默认事务只读，所以需要采用aop设置所有操作方法属性
			配置hibernate事务管理器HibernateTransactionMaager
				注入会话工厂
			配置事务属性
			配置aop
	部分代码：
		this.hibernateTemplate.save(u);
		this.hibernateTemplate.update(u);
		this.hibernateTemplate.delete(u);
		this.hibernateTemplate.get(Users.class, uid);
		this.hibernateTemplate.find("from Users");
	概念：
		事务的ACID属性：
			原子性（一个事务就是一个原子）
			一致性（前后结果一致性）
			隔离性（针对并发，多个用户使用数据库不被干扰）
			持久性
		事务隔离级别：（https://blog.csdn.net/u011861874/article/details/81539306）
			（并发问题：脏读，不可重复读，幻读）
			隔离级别：
				未提交读：ISOLATION_READ_UNCOMMITTED
					一个事务读取到其他事务未提交的数据，是级别最低的隔离机制
					会产生脏读、不可重复读、幻读
				提交读：ISOLATION_READ_COMMITTED
					一个事务读取到其他事务提交后的数据。Oracle默认隔离级别
					会产生不可重复读、幻读
				重复读：ISOLATION_DEFAULT
					一个事务对同一份数据读取到的相同，不在乎其他事务对数据的修改。MySQL默认的隔离级别
					会产生幻读
				序列化：ISOLATION_SERIALIZABLE
					事务串行化执行，隔离级别最高，牺牲了系统的并发性
					可以解决并发事务的所有问题。但是效率地下，消耗数据库性能，一般不使用
			事务的几种传播特性：
				 1. PROPAGATION_REQUIRED: 如果存在一个事务，则支持当前事务。如果没有事务则开启（需要事务）
				 2. PROPAGATION_SUPPORTS: 如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行
				 3. PROPAGATION_MANDATORY: 如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。
				 4. PROPAGATION_REQUIRES_NEW: 总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起。
				 5. PROPAGATION_NOT_SUPPORTED: 总是非事务地执行，并挂起任何存在的事务。（不需要事务）
				 6. PROPAGATION_NEVER: 总是非事务地执行，如果存在一个活动事务，则抛出异常
				 7. PROPAGATION_NESTED：如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 
					  则按TransactionDefinition.PROPAGATION_REQUIRED 属性执行
-------------------------------------------------------------------------------------------------
Maven------项目管理工具
POM   标准集合（命令）   项目生命周期   依赖管理系统   插件
作用：
构建功能，管理项目结构，管理依赖，生成报告，生成web站点，分布式工程搭建（多个工程）

1.下载安装maven
2.修改全局配置文件...conf/settings.xml
	54	localRepository本地仓
	147	mirrors 镜像（配的阿里云镜像）
	<mirror>
		<id>alimaven</id>
		<name>aliyun maven</name>
		<url>http://maven.aliyun.com/nexus/content/groups/public/</url>
		<mirrorOf>central</mirrorOf>
	</mirror
3.添加Maven环境
	M2_HOME	D:\application\develop\apache-maven-3.5.0
	path	%M2_HOME%\bin
然后cmd输入  mvn -v   检查版本
4.cmd输入mvn下载maven依赖的文件
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
在myclipse配置maven：
window->偏好->搜索maven->选install添加家目录，选settings配置settings文件目录


pom.xml是maven核心配置文件，每个maven项目根目录下有一个
主要节点：groupid(包)，artifact(工程名)，packaging（选择打包类型：war，jar，。。。），version，dependencies，parent（模型继承），build（构建）

一个Java构件的五大坐标元素：groupId，artifact，version，package，classifier（分类：二进制，源，文档.....）

pom.xml依赖配置和构建配置，插件

打包生命周期，通用生命周期
-------------------------------------------------------------------------------------------------------
spring MVC：
	核心类是中央控制器DispacherServlet类，继承自FrameworkServlet 
	DispatcherServlet类中定义了大多数需要的beans（包括HandlerMapping，HandlerAdapter，ViewResolver...）
	原理：（https://blog.csdn.net/yanweihpu/article/details/80366218）
		客户端发送请求给DispatcherServlet（中央控制器），DispatcherServlet查询所有的HandleMapping（处理器映射器），
		找到处理请求的Controller，调用HandleAdapter请求对应的Handle（即Controller）处理业务逻辑原路返回模板视图给DispatcherServlet，
		DispatcherServlet查询所有的viewResolver（视图解析器），找到模板视图对应的解析器返回视图view给DispatcherServlet，
		DispatcherServlet再根据指定的视图层页面，页面开始渲染数据给客户端。

	配置：
		注意：
			在web.xml配置文件中，（参考：https://www.cnblogs.com/yanmei-yaomy/archive/2013/02/26/3024761.html）
			<servlet>标签是servlet范围的---------比如web工程启动时加载配置Servlet的配置文件（springMVC.xml）
			<context-param>标签是Application范围的------比如web工程启动时加载application.xml配置文件（必须是Applicatuon范围的配置文件，范围看内容的配置范围）
		web.xml:
			<servlet>
				<servlet-name>springmvc</servlet-name><!-- 加载中央控制器 -->
				<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
				<init-param>
				  <param-name>contextConfigLocation</param-name>
				  <param-value>classpath:springMVC.xml</param-value>
				</init-param>
				<load-on-startup>1</load-on-startup>
			</servlet>
			<servlet-mapping>
				<servlet-name>springmvc</servlet-name>
				<url-pattern>*.do</url-pattern><!-- 符合该模式的请求，中央处理器才会处理 -->
			</servlet-mapping>
		springMVC.xml:
			配置扫描组件（扫描@controller，@service，@repository....），注册成bean对象
				<context:component-scan base-package="com.sc.controller"></context:component-scan>
			启动注解驱动-配置处理器映射器和处理器适配器注解
				<mvc:annotation-driven></mvc:annotation-driven>
			配置视图解析器InternalResourceViewResolver
				使用jsp作为视图技术JstlView
				页面路径前缀<property name="prefix" value="/WEB-INF/"></property>
				页面路径后缀<property name="suffix" value=".jsp"></property>
				优先加载<property name="order" value="1"></property>
	spring框架另一个很好的地方就是，发送请求的数据可以直接通过方法接口形参取到（就是定义的实体类型的形参是有值的）
	添加模板数据：（这个和servlet九大隐含对象设置属性值相似）
		ModeAndView addObject(返回的是数据名称, 返回的数据值)
		ModeAndView addAllObject(Map类型数据)
	设置视图：
		mav.setViewName("")	//（不写前缀后缀，使用视图解析器默认配置的前缀后缀）
		转发：forword
		重定向：redirect
	视图解析器：
		解析成视图jsp-------InternalResourceViewResolver
		解析成视图json------MappingJackJsonView
		解析成视图excel-----AbstractExcelView
第2部分：
	1.配置拦截器：
		实现拦截器接口HandleInterceptor
			preHandle方法处理请求之前被调用（返回false表示被拦截）
			postHandle方法处理请求之后但响应之前被调用
			afterCompletion方法响应之后被调用
		在springMVC.xml文件配置拦截器
			<mvc:interceptors><!--拦截器根标签 -->
			   <mvc:interceptor><!--拦截器配置项-->
				  <mvc:mapping path="/**"/><!-- 拦截的请求 -->
				  <mvc:exclude-mapping path="/loginctrl/**"/><!--不拦截的请求-->
				  <bean class="com.sc.interceptor.LoginInterceptor"></bean><!-- 自定义的拦截器bean（实现拦截器接口HandleInterceptor）-->
			   </mvc:interceptor>
			</mvc:interceptors>
	拦截器和过滤器的关系：
		拦截器基于反射机制，过滤器基于函数回调
		过滤器依赖于servlet容器
		过滤器在拦截器前后执行，拦截器可以深入到方法前后
		拦截器可以访问IOC容器的各个bean
		
	2.配置文件上传：
		在springMVC.xml中配置文件上传解析器CommonsMultipartResolver：
			设置上传编码<property name="defaultEncoding" value="utf-8"></property>
			文件最大<property name="maxUploadSize" value="1000000"></property>
			是否预先加载配置文件<property name="resolveLazily" value="true"></property>  
		在控制层处理上传业务逻辑代码：（若同时上传多个文件，MultipartFile写成数组形式MultipartFile[]，上传表单名也要写一样）
			形参MultipartFile upload
			upload.getOriginalFilename()//获取文件名---用于判空和空字符串，看文件是否存在
			req.getSession().getServletContext().getRealPath("upload")//获取项目upload文件夹在Tomcat容器（磁盘）的真实位置
			System.currentTimeMillis()+filename.substring(filename.lastIndexOf(".")//文件随机的名字
			upload.transferTo(new File(path+"/"+filename))//转换存储文件

	3.配置全局异常处理：
		在springMVC.xml中配置全局异常处理bean
		在异常处理类中，实现HandleExceptionResolver（处理器异常解析器）接口
			实现方法里获取异常信息，按异常信息类别转发到指定的异常处理页面
		（还有其他方式：注解方式....）

	4.静态资源（图片，js，css等文件）访问配置：
	<mvc:resources location="/images/" mapping="/images/**" />	/images/下的静态文件能通过url直接访问
	（注意：web-info是安全目录，只有服务器能访问，所以静态资源不要放在这里面）
----------------------------------------------------------------------------------------------------------
ssh整合：
配置文件基本配置不变（application.xml文件配置数据源，配置会话工厂，配置hibernate模板，配置dao，配置事务管理）（springMVC文件配置扫描控制器组件，启动处理器映射和适配器注解驱动，配置解析器，配置拦截器，配置文件上传解析器，配置全局异常，配置静态资源管理）
新加配置扫描@Controller，@Service，@Repository组件

@Controller 声明类为控制器
@Service 声明类为service
@Repository 声明类为Dao
@Resource 对象属性通过名称自动注入
@Autowired 对象属性通过类型自动注入（理解从底层依赖到最后业务处理HibernateTemplate（模板层持久化依赖hibernate模板）―》UsersDao（服务（也是模板层））―》UsersService（控制层依赖服务））
@RequestMapping 映射请求路径


-----------------------------------------------------------------------------------------------------------
mybatis（半自动化持久化框架）：
简介：支持定制化SQL，存储过程，高级映射的半自动持久层框架
分三层：
接口层（调用API），数据处理层（映射文件配置SQL语句），框架持久层（需要配置conf.xml核心配置文件：事务管理，连接管理（连接池），配置加载（映射文件），缓存处理）
原理：
Resources.getResourceAsReader("conf.xml");读取核心配置文件，new SqlSessionFactoryBuilder().build(r);获取SQL会话工厂，.openSession();获取SQL会话，通过sqlSession实例执行映射文件SQL语句，提交事务，关闭sqlSession

mybatis优点：
小而且没有第三方依赖
SQL写在xml文件，SQL和程序代码分离（无耦合）
能自定义编写优良的SQL语句，关联映射
缺点：
一旦写好，只依赖于写好的一类数据库（如：mysql不能切换成oracle）
二级缓存机制不佳
SQL代码需要自己写，工作量大
----------------------------------------
1.增删改查分别使用什么标签，各标签的属性有哪些？
<insert>:
id命名空间标识符Mapper接口方法
parameterType形参类型
flushCache是否清空缓存（默认为true清空）
keyProperty="uid"   useGeneratedKeys="true"结合使用，SQL语句不写主键，主键自动添加
statementType是否预编译（预编译表示SQL语句使用占位符）
timeout超时时间
<delete>：
除了自动生成主键参数外，属性和insert标签相同
<update>：
除了自动生成主键参数外，属性和insert标签相同
<select>：
相比前两个标签多了三个属性：
useCache使用缓存（默认为true）
fetchSize返回结果条数
resultType返回值类型
resultMap返回结果根据结果映射配置映射到实体类（只有关联查询有该属性）

2.resultMap标签有什么作用？
<resultMap>映射就是将SQL执行结果转换为实体类 ，转换过程中根据实体类结构需要用的association和collection

方法形参参数映射注解
方法名(@Param("参数映射名")形参类型,形参名)

一对一映射关联（多对一（从多的角度，也就是一对一）也一样的配置，SQL查询语句不同）：
	<!-- property实体类对应的被依赖的参数  javaType实体类 -->
<association property="teacher" javaType="Teacher" autoMapping="true">
一对多映射关联（多对多（从多的角度，也就是一对多）也一样的配置，SQL查询语句不同）：
	<!-- property实体类对应的被依赖的参数  ofType实体类 -->
<collection property="student" ofType="Student" autoMapping="true">
---------------------------------------
动态SQL，缓存，优化配置：
if
choose ，when，otherwise
where
foreach

一级缓存： sqlsession级别 ，默认开启
二级缓存 ：mapper级别（但不是一个SQLSession） ，默认关闭 ，需手动配置开启
<!-- 全局二级缓存默认是开启的，只需再开启局部二级缓存 -->
  <cache></cache>

<conf.xml>文件配置驼峰命名法则：
<settings>
      <!-- 启用驼峰命名法则,自动把形如stu_name列映射到stuName属性 -->
      <setting name="mapUnderscoreToCamelCase" value="true"/>
</settings>
------------------------------------------------------------
ssm框架：
在lib目录添加jar包：
	jsqlparser-0.9.4.jar（SQL语句解析器）
	log4j-1.2.17.jar
	mybatis-3.3.0.jar
	mybatis-spring-1.2.1.jar（ssm专用）
	mysql-connector-java-5.1.15-bin.jar
	pagehelper-4.1.1.jar（分页）

通过GeneratorJavaTool工程工具生成（entity包和Mapper包----都属于Moudle层）
	实体类，SQL映射文件和Mapper接口

编写service（Moudle）层
	
编写Controller层

编写View层

=====================
配置文件：
	applicationContext.xml
	conf.xml
	jdbc.properties
	log4j.properties
	springMVC.xml

applicationContext.xml
组件扫描（三层），注册bean对象
引入包含数据库四个属性文件
配置数据源（连接数据库）-----注入四个属性
配置会话工厂（获取会话）
	注入数据源
	给实体类起别名
	设置SQL映射文件！！！！
	加载mybatis配置文件
配置Mapper接口扫描---------------Mapper提供持久化操作！！！！！
	Mapper接口包路径
	注入会话工厂
事务配置
	配置事务管理器
		注入数据源
	配置事务属性（设置方法是否需要事务）
	配置aop

conf.xml
设置启用驼峰命名法则
设置分页合理化

springMVC.xml
组件扫描（Controller）
启用springmvc的注解驱动，配置处理器映射器和处理器适配器
配置内部资源视图解析器
配置用户登录拦截器
配置文件上传解析器
配置全局异常

web.xml
配置字符编码过滤器
配置上下文加载监听器，作用：读取spring配置文件
springmvc中央控制器





shiro认证过程（自结）：
主体对象提交登录认证-------》到认证器认证查看是否存在该账户，若为返回null，表明该账户名不存在，异常处理抛异常信息；若返回用户名，表明存在该账户名，再进行密码比对------》到密码匹配器匹配密码是否正确（获取输入密码进行散列加密获取密文，再从数据库获取密文，最后进行比对），比对错误，返回false，则异常处理抛出异常信息；若成功则登录成功！


